import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å—Ç–∏–ª–µ–π
st.set_page_config(
    page_title='AutoCall ‚Äî –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
    layout='wide',
    initial_sidebar_state='expanded'
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω–æ–π —à—Ä–∏—Ñ—Ç */
    body {
        font-family: 'Segoe UI', Arial, sans-serif;
        color: #2c3e50;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1 {
        color: #2c3e50;
        font-weight: 600;
        font-size: 2.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #3498db;
        margin-bottom: 2rem;
    }
    
    h2 {
        color: #34495e;
        font-weight: 500;
        font-size: 1.8rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }

    /* –¢–∞–±–ª–∏—Ü—ã */
    .dataframe {
        font-family: 'Segoe UI', Arial, sans-serif !important;
        font-size: 14px !important;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    div[data-testid="stMetricValue"] {
        font-size: 2rem !important;
        color: #2980b9 !important;
    }

    /* –ü–æ–¥–ø–∏—Å–∏ –∫ –º–µ—Ç—Ä–∏–∫–∞–º */
    div[data-testid="stMetricLabel"] {
        font-size: 1rem !important;
        color: #7f8c8d !important;
    }

    /* –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è */
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }

    /* –ò–Ω—Ñ–æ-–±–ª–æ–∫–∏ */
    div.stAlert {
        font-family: 'Segoe UI', Arial, sans-serif !important;
        border-radius: 8px !important;
        padding: 1rem !important;
    }

    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        font-family: 'Segoe UI', Arial, sans-serif !important;
        font-size: 1rem !important;
        padding: 0.5rem 1rem !important;
        border-radius: 8px !important;
    }

    /* –°–µ–ª–µ–∫—Ç–æ—Ä—ã */
    .stSelectbox > div > div {
        font-family: 'Segoe UI', Arial, sans-serif !important;
    }

    /* –¢–µ–Ω–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ */
    div[data-testid="stMetricValue"] {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 1rem;
        background: white;
    }

    /* –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
    .stButton > button:hover {
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
st.markdown("<h1 style='text-align: center;'>AutoCall ‚Äî –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –æ–±–∑–≤–æ–Ω—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</h1>", unsafe_allow_html=True)

# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("""
<div style='text-align: center; padding: 1rem; margin-bottom: 2rem; color: #7f8c8d;'>
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±–∑–≤–æ–Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π KPI –∏ CSI –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º
</div>
""", unsafe_allow_html=True)

uploaded = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel/CSV', type=['xlsx', 'xls', 'csv'])
if uploaded is not None:
    try:
        if uploaded.name.lower().endswith('.csv'):
            df = pd.read_csv(uploaded, header=None)
        else:
            df = pd.read_excel(uploaded, header=None)
        df.columns = df.iloc[3]
        df = df.iloc[4:].reset_index(drop=True)
        df = df.dropna(how='all').reset_index(drop=True)
        df.columns = [str(c).strip() for c in df.columns]
        if len(df) > 0 and str(df.iloc[-1,0]).strip().lower().startswith('–≤—Å–µ–≥–æ'):
            df = df.iloc[:-1].reset_index(drop=True)
    except Exception as e:
        st.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ' + str(e))
    else:
        st.write('–†–∞–∑–º–µ—Ä:', df.shape)
        # –°–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Å–µ–∫—Ü–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        with st.expander("üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", expanded=False):
            st.dataframe(df.head(50), width='stretch')

        question_cols = df.columns[5:13]
        dept_col = df.columns[2]
        total_calls = len(df)

        def count_answers(row):
            vals = row[question_cols]
            return sum(str(v).strip().isdigit() and 1 <= int(str(v).strip()) <= 10 for v in vals)

        def csi(row):
            vals = row[question_cols]
            nums = [int(str(v).strip()) for v in vals if str(v).strip().isdigit() and 1 <= int(str(v).strip()) <= 10]
            return sum(nums) / len(nums) if nums else None

        answers_per_row = df.apply(count_answers, axis=1)
        csi_per_row = df.apply(csi, axis=1)
        df['_answers'] = answers_per_row
        df['_csi'] = csi_per_row

        all_answered = (answers_per_row == len(question_cols)).sum()
        any_answered = (answers_per_row > 0).sum()
        percent_all = all_answered / total_calls * 100 if total_calls else 0
        percent_any = any_answered / total_calls * 100 if total_calls else 0

        # Calculate overall average for question 6 (index 5 in question_cols)
        q6_col = question_cols[5]
        q6_vals = [int(str(v).strip()) for v in df[q6_col] if str(v).strip().isdigit() and 1 <= int(str(v).strip()) <= 10]
        q6_avg = np.mean(q6_vals) if q6_vals else None

        st.markdown("## üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

        # KPI –º–µ—Ç—Ä–∏–∫–∏ –≤ —á–µ—Ç—ã—Ä–µ –∫–æ–ª–æ–Ω–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric(
                '–í—Å–µ–≥–æ –æ–±–∑–≤–æ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
                f"{total_calls:,}",
                help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –≤—ã–≥—Ä—É–∑–∫–µ"
            )
        with col2:
            st.metric(
                '–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã',
                f"{all_answered:,}",
                delta=f"{percent_all:.1f}%",
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã"
            )
        with col3:
            st.metric(
                '–û—Ç–≤–µ—Ç–∏–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å',
                f"{any_answered:,}",
                delta=f"{percent_any:.1f}%",
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"
            )
        with col4:
            st.metric(
                '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤–æ–ø—Ä–æ—Å—É 6',
                f"{q6_avg:.2f}" if q6_avg else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                help="–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º–∏ –±—ã–ª–∏ —Å –í–∞–º–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã"
            )

        st.markdown("## üìà CSI –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º")
        
        num_col = df.columns[0]
        dept_stats = df.groupby(dept_col).agg(
            –∑–≤–æ–Ω–∫–æ–≤=(num_col, 'count'),
            —Å—Ä–µ–¥–Ω–∏–π_CSI=('_csi', 'mean'),
            –æ—Ç–≤–µ—Ç–∏–ª–∏_–≤—Å–µ=(num_col, lambda x: (df.loc[x.index, '_answers'] == len(question_cols)).sum()),
            –æ—Ç–≤–µ—Ç–∏–ª–∏_—Ö–æ—Ç—è–±—ã=(num_col, lambda x: (df.loc[x.index, '_answers'] > 0).sum()),
        )
        dept_stats['%_–æ—Ç–≤–µ—Ç–∏–ª–∏_–≤—Å–µ'] = dept_stats['–æ—Ç–≤–µ—Ç–∏–ª–∏_–≤—Å–µ'] / dept_stats['–∑–≤–æ–Ω–∫–æ–≤'] * 100
        dept_stats['%_–æ—Ç–≤–µ—Ç–∏–ª–∏_—Ö–æ—Ç—è–±—ã'] = dept_stats['–æ—Ç–≤–µ—Ç–∏–ª–∏_—Ö–æ—Ç—è–±—ã'] / dept_stats['–∑–≤–æ–Ω–∫–æ–≤'] * 100
        dept_stats['—Å—Ä–µ–¥–Ω–∏–π_CSI'] = dept_stats['—Å—Ä–µ–¥–Ω–∏–π_CSI'].round(2)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
        styled_stats = dept_stats.reset_index().style\
            .background_gradient(subset=['—Å—Ä–µ–¥–Ω–∏–π_CSI'], cmap='RdYlGn')\
            .format({
                '—Å—Ä–µ–¥–Ω–∏–π_CSI': '{:.2f}',
                '%_–æ—Ç–≤–µ—Ç–∏–ª–∏_–≤—Å–µ': '{:.1f}%',
                '%_–æ—Ç–≤–µ—Ç–∏–ª–∏_—Ö–æ—Ç—è–±—ã': '{:.1f}%'
            })\
            .set_properties(**{
                'font-size': '14px',
                'font-family': 'Segoe UI, Arial, sans-serif',
                'text-align': 'center'
            })
        
        st.dataframe(styled_stats, width='stretch')

        st.markdown("## üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º")
        
        # –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        selected_questions = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:',
            options=list(enumerate(question_cols, 1)),
            default=list(enumerate(question_cols, 1)),
            format_func=lambda x: f'–í–æ–ø—Ä–æ—Å {x[0]}: {x[1]}'
        )

        # –ì—Ä–∞—Ñ–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        for i, qcol in selected_questions:
            q_stats = df.groupby(dept_col)[qcol].apply(
                lambda vals: np.mean(lst) if (lst := [int(str(v).strip()) for v in vals if str(v).strip().isdigit() and 1 <= int(str(v).strip()) <= 10]) else np.nan
            )
            
            fig = go.Figure()
            fig.add_bar(
                x=q_stats.index,
                y=q_stats.values,
                marker_color='skyblue',
                text=q_stats.values.round(2),
                textposition='auto',
                textfont=dict(size=18),
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            fig.update_layout(
                height=450,
                margin=dict(t=100, b=50, l=50, r=50),
                yaxis_range=[0, 10],
                title=f'<b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤–æ–ø—Ä–æ—Å—É {i}</b><br>{qcol}',
                xaxis_title='–û—Ç–¥–µ–ª–µ–Ω–∏–µ',
                yaxis_title='–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª',
                font=dict(size=14),
                xaxis=dict(tickfont=dict(size=14)),
                yaxis=dict(tickfont=dict(size=14)),
                title_font=dict(size=18)
            )
            
            # –í—ã–≤–æ–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            st.plotly_chart(fig, use_container_width=True)

        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.markdown("## üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
                df.to_csv(index=False, encoding='utf-8-sig'),
                "cleaned_data.csv",
                "text/csv",
                key='download-csv'
            )
        with col2:
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º (CSV)",
                dept_stats.reset_index().to_csv(index=False, encoding='utf-8-sig'),
                "department_stats.csv",
                "text/csv",
                key='download-stats'
            )
